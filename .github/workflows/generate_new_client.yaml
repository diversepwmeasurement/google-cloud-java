jobs:
  generate:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      uses: actions/setup-python@v4
      with:
        cache: pip
        python-version: '3.9'
    - continue-on-error: true
      id: date
      name: Get current week within the year
      run: echo "::set-output name=week_of_year::$(date +'%W' --utc)"
    - continue-on-error: true
      name: Install new-client.py dependencies
      run: pip install --require-hashes -r generation/new_client/requirements.txt
    - continue-on-error: true
      env:
        API_DESCRIPTION: ${{ github.event.inputs.api_description }}
        API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
        DESTINATION_NAME: ${{ github.event.inputs.destination_name }}
        DISTRIBUTION_NAME: ${{ github.event.inputs.distribution_name }}
        GOOGLEAPIS_GEN_URL: https://cloud-java-bot:${{ secrets.CLOUD_JAVA_BOT_TOKEN
          }}@github.com/googleapis/googleapis-gen.git
        NAME_PRETTY: ${{ github.event.inputs.name_pretty }}
        PRODUCT_DOCS: ${{ github.event.inputs.product_docs }}
        PROTO_PATH: ${{ github.event.inputs.proto_path }}
        REST_DOCS: ${{ github.event.inputs.rest_docs }}
        RPC_DOCS: ${{ github.event.inputs.rpc_docs }}
        TRANSPORT: ${{ github.event.inputs.transport }}
      id: generation
      name: Generate
      run: "set -x\narguments=\"--api_shortname=\\\"${API_SHORTNAME}\\\" \\\n--proto-path=\\\
        \"${PROTO_PATH}\\\" \\\n--name-pretty=\\\"${NAME_PRETTY}\\\" \\\n--product-docs=\\\
        \"${PRODUCT_DOCS}\\\" \\\n--api-description=\\\"${API_DESCRIPTION}\\\"\"\n\
        \n# helper function that appends a python argument only if specified in the\
        \ GH action inputs\nappend_argument() {\n  py_arg=$1\n  # env vars look exactly\
        \ like new-client arguments but uppercase + underscores\n  env_name=$(echo\
        \ \"${py_arg}\" | sed 's/-/_/g' | sed -e 's/\\([a-z]\\)/\\U\\1/g')\n  if [[\
        \ -n \"${!env_name}\" ]]; then\n    # $(echo) is redundant but it works around\
        \ a syntax highlighting problem in vim\n    arguments=$(echo \"${arguments}\
        \ --${py_arg}=\\\"${!env_name}\\\"\")\n  fi\n}\n\ndeclare -a optional_args=('transport'\
        \ 'destination-name' 'distribution-name' 'group-id' 'rest-docs' 'rpc-docs')\n\
        \nfor python_argument in \"${optional_args[@]}\"; do\n  append_argument \"\
        ${python_argument}\"\ndone\necho \"::set-output name=new_library_args::${arguments}\"\
        \necho \"${arguments} --googleapis-gen-url=\\\"${GOOGLEAPIS_GEN_URL}\\\"\"\
        \ | xargs python generation/new_client/new-client.py generate\n"
    - continue-on-error: true
      env:
        API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
        GENERATION_ARGUMENTS: ${{ steps.generation.outputs.new_library_args }}
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
        USERNAME: ${{ github.actor }}
      name: Push to branch and create PR
      run: 'set -x

        [ -z "`git config user.email`" ] && git config --global user.email "cloud-java-bot@google.com"

        [ -z "`git config user.name`" ] && git config --global user.name "cloud-java-bot"


        # create and push to branch in origin

        # random_id allows multiple runs of this workflow

        random_id=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 5; echo)

        branch_name="new-library/${{ github.event.inputs.api_shortname }}-${random_id}"

        git checkout -b "${branch_name}"

        git add --all

        commit_message="feat: [${API_SHORTNAME}] new module for ${API_SHORTNAME}"

        git commit -m "${commit_message}"

        git remote add monorepo https://cloud-java-bot:${GH_TOKEN}@github.com/${{
        github.repository }}.git

        git fetch -q --unshallow monorepo

        git push -f monorepo "${branch_name}"


        # create PR

        pr_body="Generated by @${USERNAME} via [generate_new_client.yaml](https://github.com/googleapis/google-cloud-java/actions/workflows/generate_new_client.yaml)


        Command used:


        \`\`\`

        python generation/new_client/new-client.py generate ${GENERATION_ARGUMENTS}

        \`\`\`"

        gh pr create --title "${commit_message}" --label "owlbot:run" --head "${branch_name}"
        --body "${pr_body}"

        '
name: Generate new GAPIC client library
on:
  repository_dispatch:
    types: trigger-ga___generate_new_client.yaml
