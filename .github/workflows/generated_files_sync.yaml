env:
  library_generation_image_tag: 2.39.0
  repo_volumes: -v repo-google-cloud-java:/workspace/google-cloud-java
jobs:
  consolidate-config:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Apply consolidate_config.sh
      run: 'bash generation/consolidate_config.sh

        '
    - continue-on-error: true
      name: Fail if there's any difference (To fix, run generation/consolidate_config.sh)
      run: git --no-pager diff --exit-code
  gapic-bom:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: setup docker environment
      run: "# we create a volume pointing to `pwd` (google-cloud-java) that will\n\
        # be referenced by the container and its children\nif [[ $(docker volume inspect\
        \ repo-google-cloud-java) != '[]' ]]; then\n  docker volume rm repo-google-cloud-java\n\
        fi\ndocker volume create --name \"repo-google-cloud-java\" --opt \"type=none\"\
        \ --opt \"device=$(pwd)\" --opt \"o=bind\"\n"
      shell: bash
    - continue-on-error: true
      name: Generate gapic-libraries-bom/pom.xml
      run: "docker run --rm \\\n  ${repo_volumes} \\\n  -v /tmp:/tmp \\\n  -v /var/run/docker.sock:/var/run/docker.sock\
        \ \\\n  -e \"RUNNING_IN_DOCKER=true\" \\\n  -e \"REPO_BINDING_VOLUMES=${repo_volumes}\"\
        \ \\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:\"${library_generation_image_tag}\"\
        \ \\\n  python /src/cli/generate_monorepo_gapic_bom.py generate --repository-path=/workspace/google-cloud-java\
        \ --versions-file=/workspace/google-cloud-java/versions.txt\n"
      shell: bash
    - continue-on-error: true
      name: Fail if there's any difference
      run: git --no-pager diff --exit-code
  generate-readme:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-python@v4
      with:
        architecture: x64
        python-version: '3.7'
    - continue-on-error: true
      run: python3 -m pip install --require-hashes -r .github/requirements.txt
    - continue-on-error: true
      run: python3 generate-readme.py
  gitignore_correctness:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: checking any files matching gitignore
      run: "find . -type f -name '*.java' -not -path './.git/*' \\\n    |git check-ignore\
        \ --no-index --verbose --stdin\n# https://git-scm.com/docs/git-check-ignore\
        \ returns 1 when there's no\n# matching files with the gitignore file.\n#\
        \ \"--no-index\" is needed to check against tracked files.\nif [ \"$?\" ==\
        \ 1 ]; then\n  echo \"No matching files. Good.\"\n  exit 0\nelse\n  echo \"\
        There are gitignore matching files. Please adjust .gitignore.\"\n  exit 1\n\
        fi\n"
      shell: /usr/bin/bash --noprofile --norc -o pipefail {0}
  group_id_check_for_maps_libraries:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Install Maps modules
      run: "IncludedNonCloudModules=$(find java-maps-* -name 'pom.xml'  \\\n    |sed\
        \ -e 's|/pom.xml$||' |xargs  |sed -e 's/ /,/g')\necho \"Included modules:\
        \ ${IncludedNonCloudModules}\"\nmvn -B -V -ntp install --also-make --projects\
        \ \"${IncludedNonCloudModules}\" \\\n    -DskipTests\n"
    - continue-on-error: true
      name: Ensure Maps libraries have com.google.maps group IDs
      run: "for POM in $(find java-maps-* -name 'pom.xml'); do\n  group_id=$(mvn -q\
        \ exec:exec -Dexec.executable=echo -Dexec.args='${project.groupId}' \\\n \
        \     --projects $POM  2>/dev/null )\n  echo \"${group_id}\" |grep -q com.google.maps\n\
        \  # 0 if match; otherwise 1\n  match=$?\n  if [ \"${match}\" == \"1\" ];\
        \ then\n    echo \"Unexpected group ID '${group_id}' found in ${POM}\"\n \
        \   exit 1\n  fi\n  echo \"Passed ${POM}\"\ndone\necho \"All group IDs start\
        \ with com.google.maps. Good.\"\n"
  owlbot-py:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Generate owlbot.py files
      run: 'bash generation/update_owlbot_postprocessor_config.sh

        '
    - continue-on-error: true
      name: Fail if there's any difference (To fix, run generation/update_owlbot_postprocessor_config.sh)
      run: git --no-pager diff --exit-code
  owlbot-yaml:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Check if .Owlbot-hermetic.yaml files are correctly configured
      run: 'bash generation/set_owlbot_config.sh

        '
    - continue-on-error: true
      name: Fail if there's any difference (To fix, run generation/set_owlbot_config.sh)
      run: git --no-pager diff --exit-code
  package_name_check:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Ensure no new invalid package name in Java files
      run: "# grep returns \"1\" (error) when no output\nset +e\necho \"Finding files\
        \ matching '*main/java/google/*.java'\"\n# In past, we published Java classes\
        \ with wrong package names (google.)\n# due to improper java_package field\
        \ in proto files (https://protobuf.dev/programming-guides/proto3/#options).\n\
        # This check excludes these existing files.\n\n# java/com/google : This is\
        \ the standard package\n# samples         : Samples are not shipped as a library\n\
        # grafeas         : java-grafeas is known to have special package name\n#\
        \ cloud-build v2  : java_package was not configured when we published\n# \
        \                  the Cloud Build V2 client library\n# the rest        :\
        \ the same as above\ninvalid_files=$(find . -name '*.java' \\\n    |grep --invert-match\
        \ 'java/com/google' \\\n    |grep --invert-match samples \\\n    |grep --invert-match\
        \ grafeas \\\n    |grep --invert-match 'cloud-build.*v2' \\\n    |grep --invert-match\
        \ 'google/monitoring/v3/DroppedLabelsOuterClass.java' \\\n    |grep --invert-match\
        \ 'google/cloud/policytroubleshooter/v1/Explanations.java')\nif [ -n \"${invalid_files}\"\
        \ ]; then\n  echo \"New invalid package name found. Check the files: ${invalid_files}\"\
        \n  exit 1\nfi\necho \"No new invalid package names in Java files\"\n"
      shell: bash
  root-pom:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: setup docker environment
      run: "# we create a volume pointing to `pwd` (google-cloud-java) that will\n\
        # be referenced by the container and its children\nif [[ $(docker volume inspect\
        \ repo-google-cloud-java) != '[]' ]]; then\n  docker volume rm repo-google-cloud-java\n\
        fi\ndocker volume create --name \"repo-google-cloud-java\" --opt \"type=none\"\
        \ --opt \"device=$(pwd)\" --opt \"o=bind\"\n"
      shell: bash
    - continue-on-error: true
      name: Generate root pom.xml file
      run: "docker run --rm \\\n  ${repo_volumes} \\\n  -v /tmp:/tmp \\\n  -v /var/run/docker.sock:/var/run/docker.sock\
        \ \\\n  -e \"RUNNING_IN_DOCKER=true\" \\\n  -e \"REPO_BINDING_VOLUMES=${repo_volumes}\"\
        \ \\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:\"${library_generation_image_tag}\"\
        \ \\\n  python /src/cli/generate_monorepo_root_pom.py generate --repository-path=/workspace/google-cloud-java\n"
      shell: bash
    - continue-on-error: true
      name: Fail if there's any difference
      run: git --no-pager diff --exit-code
name: generation diff
on:
  repository_dispatch:
    types: trigger-ga___generated_files_sync.yaml
