jobs:
  generate-from-configuration:
    env:
      base_branch: main
      branch_name: generate-libraries-main
      library_generation_image_tag: 2.39.0
      repo_volumes: -v repo-google-cloud-java:/workspace/google-cloud-java
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: get-baseline
      name: get baseline commit
      run: 'echo "baseline_commit=$(grep googleapis_commitish generation_config.yaml
        | cut -d " " -f2 | xargs)" >> "$GITHUB_ENV"

        '
      shell: bash
    - continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
      id: setup-branch
      name: setup branch for pull request
      run: "[ -z \"`git config user.email`\" ] && git config --global user.email \"\
        cloud-java-bot@google.com\"\n[ -z \"`git config user.name`\" ] && git config\
        \ --global user.name \"cloud-java-bot\"\n# try to find a open pull request\
        \ associated with the branch\npr_num=$(gh pr list -s open -H \"${branch_name}\"\
        \ -q . --json number | jq \".[] | .number\")\n# create a branch if there's\
        \ no open pull request associated with the\n# branch; otherwise checkout the\
        \ pull request.\nif [ -z \"${pr_num}\" ]; then\n  git checkout -b \"${branch_name}\"\
        \nelse\n  gh pr checkout \"${pr_num}\"\nfi\necho \"pr_num=${pr_num}\" >> \"\
        $GITHUB_ENV\"\n"
      shell: bash
    - continue-on-error: true
      name: setup docker environment
      run: "# we create a volume pointing to `pwd` (google-cloud-java) that will\n\
        # be referenced by the container and its children\nif [[ $(docker volume inspect\
        \ repo-google-cloud-java) != '[]' ]]; then\n  docker volume rm repo-google-cloud-java\n\
        fi\ndocker volume create --name \"repo-google-cloud-java\" --opt \"type=none\"\
        \ --opt \"device=$(pwd)\" --opt \"o=bind\"\n"
      shell: bash
    - continue-on-error: true
      id: update-commit
      name: update googleapis commit to latest
      run: 'mkdir tmp-googleapis

        # use partial clone because only commit history is needed.

        git clone --filter=blob:none https://github.com/googleapis/googleapis.git
        tmp-googleapis

        pushd tmp-googleapis

        git pull

        latest_commit=$(git rev-parse HEAD)

        popd

        rm -rf tmp-googleapis

        sed -i -e "s/^googleapis_commitish.*$/googleapis_commitish: ${latest_commit}/"
        generation_config.yaml

        '
      shell: bash
    - continue-on-error: true
      name: generate from configuration
      run: "docker run --rm \\\n  ${repo_volumes} \\\n  -v /tmp:/tmp \\\n  -v /var/run/docker.sock:/var/run/docker.sock\
        \ \\\n  -e \"RUNNING_IN_DOCKER=true\" \\\n  -e \"REPO_BINDING_VOLUMES=${repo_volumes}\"\
        \ \\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:\"${library_generation_image_tag}\"\
        \ \\\n  python /src/generate_repo.py generate --generation-config-yaml=/workspace/google-cloud-java/generation_config.yaml\
        \ --repository-path=/workspace/google-cloud-java\n"
      shell: bash
    - continue-on-error: true
      env:
        baseline_commit: ${{ env.baseline_commit }}
      id: generate-description
      name: generate pull request description
      run: "# the pr description (body) will be available in pr-description.txt after\n\
        # running this command.\nset -x\ndocker run --rm \\\n  ${repo_volumes} \\\n\
        \  -v /tmp:/tmp \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e\
        \ \"RUNNING_IN_DOCKER=true\" \\\n  -e \"REPO_BINDING_VOLUMES=${repo_volumes}\"\
        \ \\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:\"${library_generation_image_tag}\"\
        \ \\\n  python /src/generate_pr_description.py generate --generation-config-yaml=/workspace/google-cloud-java/generation_config.yaml\
        \ --baseline-commit=\"${baseline_commit}\"\n"
      shell: bash
    - continue-on-error: true
      env:
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
        pr_num: ${{ env.pr_num }}
      name: create or update the pull request
      run: "title=\"chore: generate libraries at $(date)\"\ngit add java-* pom.xml\
        \ gapic-libraries-bom/pom.xml versions.txt generation_config.yaml\n# use --allow-empty\
        \ because (rarely) there's no change.\ngit commit --allow-empty -m \"${title}\"\
        \nif [ -z \"${pr_num}\" ]; then\n  git remote add monorepo https://cloud-java-bot:${GH_TOKEN}@github.com/${{\
        \ github.repository }}.git\n  git fetch -q --unshallow monorepo\n  git push\
        \ -f monorepo \"${branch_name}\"\n  set -x\n  gh pr create --base \"${base_branch}\"\
        \ --title \"${title}\" --head \"${branch_name}\" --body \"$(cat pr_description.txt)\"\
        \nelse\n  git push\n  gh pr edit \"${pr_num}\" --title \"${title}\"\n  gh\
        \ pr edit \"${pr_num}\" --body \"$(cat pr_description.txt)\"\nfi\n"
      shell: bash
name: Generate GAPIC libraries from configuration
on:
  repository_dispatch:
    types: trigger-ga___generate-from-configuration.yaml
