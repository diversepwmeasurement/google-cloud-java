jobs:
  generate:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: actions/setup-python@v4
      with:
        cache: pip
        python-version: '3.9'
    - continue-on-error: true
      name: Install add-new-client-config.py dependencies
      run: pip install --require-hashes -r generation/new_client_hermetic_build/requirements.txt
    - continue-on-error: true
      env:
        API_DESCRIPTION: ${{ github.event.inputs.api_description }}
        API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
        DISTRIBUTION_NAME: ${{ github.event.inputs.distribution_name }}
        LIBRARY_NAME: ${{ github.event.inputs.library_name }}
        NAME_PRETTY: ${{ github.event.inputs.name_pretty }}
        PRODUCT_DOCS: ${{ github.event.inputs.product_docs }}
        PROTO_PATH: ${{ github.event.inputs.proto_path }}
        REST_DOCS: ${{ github.event.inputs.rest_docs }}
        RPC_DOCS: ${{ github.event.inputs.rpc_docs }}
      id: config_generation
      name: Add entry to generation_config.yaml
      run: "set -x\narguments=$(python generation/new_client_hermetic_build/generate-arguments.py)\n\
        echo \"::set-output name=new_library_args::${arguments}\"\necho \"${arguments}\"\
        \ \\\n      | xargs python generation/new_client_hermetic_build/add-new-client-config.py\
        \ add-new-library\n"
    - continue-on-error: true
      name: setup docker environment
      run: "set -x\n# we create a volume pointing to `pwd` (google-cloud-java) that\
        \ will\n# be referenced by the container and its children\nif [[ $(docker\
        \ volume inspect repo-google-cloud-java) != '[]' ]]; then\n  docker volume\
        \ rm repo-google-cloud-java\nfi\ndocker volume create --name \"repo-google-cloud-java\"\
        \ --opt \"type=none\" --opt \"device=$(pwd)\" --opt \"o=bind\"\n"
      shell: bash
    - continue-on-error: true
      env:
        API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
      id: generation
      name: generate from configuration
      run: "set -x\nrepo_volumes=\"-v repo-google-cloud-java:/workspace/google-cloud-java\"\
        \necho \"::set-output name=repo_volumes::${repo_volumes}\"\ndocker run --rm\
        \ \\\n  ${repo_volumes} \\\n  -v /tmp:/tmp \\\n  -v /var/run/docker.sock:/var/run/docker.sock\
        \ \\\n  -e \"RUNNING_IN_DOCKER=true\" \\\n  -e \"REPO_BINDING_VOLUMES=${repo_volumes}\"\
        \ \\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:2.39.0\
        \ \\\n  python /src/generate_repo.py generate \\\n  --generation-config-yaml=/workspace/google-cloud-java/generation_config.yaml\
        \ \\\n  --repository-path=/workspace/google-cloud-java \\\n  --target-library-names=${API_SHORTNAME}\n"
      shell: bash
    - continue-on-error: true
      env:
        API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
        DOCKER_VOLUMES: ${{ steps.generation.outputs.repo_volumes }}
        GENERATION_ARGUMENTS: ${{ steps.config_generation.outputs.new_library_args
          }}
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
        USERNAME: ${{ github.actor }}
      name: Push to branch and create PR
      run: "set -x\n[ -z \"`git config user.email`\" ] && git config --global user.email\
        \ \"cloud-java-bot@google.com\"\n[ -z \"`git config user.name`\" ] && git\
        \ config --global user.name \"cloud-java-bot\"\n\n# create and push to branch\
        \ in origin\n# random_id allows multiple runs of this workflow\nrandom_id=$(tr\
        \ -dc A-Za-z0-9 </dev/urandom | head -c 5; echo)\nbranch_name=\"new-library/${{\
        \ github.event.inputs.api_shortname }}-${random_id}\"\ngit checkout -b \"\
        ${branch_name}\"\ngit add --all\ncommit_message=\"feat: [${API_SHORTNAME}]\
        \ new module for ${API_SHORTNAME}\"\ngit commit -m \"${commit_message}\"\n\
        git remote add monorepo https://cloud-java-bot:${GH_TOKEN}@github.com/${{\
        \ github.repository }}.git\ngit fetch -q --unshallow monorepo\ngit push -f\
        \ monorepo \"${branch_name}\"\n\n# create PR\npr_body=\"Generated by @${USERNAME}\
        \ via [generate_new_client_hermetic_build.yaml](https://github.com/googleapis/google-cloud-java/actions/workflows/generate_new_client_hermetic_build.yaml)\n\
        \nCommand used:\n\n\\`\\`\\`\npython generation/new_client_hermetic_build/add-new-client-config.py\
        \ add-new-client ${GENERATION_ARGUMENTS}\n\ndocker run --rm \\\\\n  ${DOCKER_VOLUMES}\
        \ \\\\\n  -v /tmp:/tmp \\\\\n  -v /var/run/docker.sock:/var/run/docker.sock\
        \ \\\\\n  -e \\\"RUNNING_IN_DOCKER=true\\\" \\\\\n  -e \\\"REPO_BINDING_VOLUMES=${DOCKER_VOLUMES}\\\
        \" \\\\\n  gcr.io/cloud-devrel-public-resources/java-library-generation:latest\
        \ \\\\\n  python /src/generate_repo.py generate \\\\\n  --generation-config-yaml=/workspace/google-cloud-java/generation_config.yaml\
        \ \\\\\n  --repository-path=/workspace/google-cloud-java \\\\\n  --target-library-names=${API_SHORTNAME}\n\
        \n\\`\\`\\`\"\ngh pr create --title \"${commit_message}\" --label \"owlbot:run\"\
        \ --head \"${branch_name}\" --body \"${pr_body}\"\n"
name: Generate new GAPIC client library (Hermetic Build)
on:
  repository_dispatch:
    types: trigger-ga___generate_new_client_hermetic_build.yaml
